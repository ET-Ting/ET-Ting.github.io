{"title":"【Tutorial】利用 Streamlit 建立情緒分析 web app","date":"2023-08-07T14:31:00.000Z","date_formatted":{"ll":"Aug 7, 2023","L":"08/07/2023","MM-DD":"08-07"},"author":"ET","link":"2023/08/07/【Tutorial】利用-Streamlit-建立情緒分析-web-app","categories":["Tutorial"],"updated":"2023-08-10T07:57:22.431Z","content":"<blockquote>\n<p>情緒很複雜 語言很偉大</p>\n</blockquote>\n<p align=\"right\">—— 郁可唯〈進化〉</p>\n<h3 id=\"緣起\">緣起<a title=\"#緣起\" href=\"#緣起\"></a></h3>\n<p>搭建並訓練機器學習模型時，時常會遇到難以跟不同領域者解釋成果的窘境，生硬的程式碼如同一座高牆阻隔；但此時，視覺化的介面便能做為兩端的橋樑，讓模型的預測結果可以更容易地呈現在對方眼前。</p>\n<p>不過，致力於後端程式者可能並不那麼熟習於前端網頁的撰寫，對於這一類人，Streamlit 便是個十分好上手的工具。</p>\n<h3 id=\"關於-streamlit\">關於 Streamlit<a title=\"#關於-streamlit\" href=\"#關於-streamlit\"></a></h3>\n<p><a href=\"https://streamlit.io/\" target=\"_blank\">Streamlit</a> 是一個面向機器學習和數據科學的開源應用程式框架，單純利用 Python 程式語言即可架構網頁應用程式介面，使得機器學習的訓練成效或數據科學的分析結果能夠以視覺化的方式呈現，更可引入官方的 <a href=\"https://docs.streamlit.io/library/api-reference\" target=\"_blank\">API</a>，在頁面中加入圖表、按鈕和選單等元件，使應用程式更具互動性。</p>\n<p>另外，在本機完成 Streamlit 頁面的撰寫後，可免費將 web app 部署至 <a href=\"https://streamlit.io/cloud\" target=\"_blank\">Streamlit Community Cloud</a> 供大眾使用；在官網的 <a href=\"https://streamlit.io/gallery\" target=\"_blank\">Gallery</a> 中也可參考並試用其他人所創建的 web app。</p>\n<h3 id=\"建立-streamlit-web-app\">建立 Streamlit Web App<a title=\"#建立-streamlit-web-app\" href=\"#建立-streamlit-web-app\"></a></h3>\n<p>簡單介紹了 Streamlit 後，下面會帶著大家使用這項工具，並建立一個簡易的<a href=\"https://et-ting-sentiment-streamlit-sentiment-streamlit-ghxmc9.streamlit.app/\" target=\"_blank\">情緒分析 web app</a>。</p>\n<p>本次的實作會撰寫兩個程式檔案，其中一個用以定義情緒分析函式，並存貯為 pickle 檔以利引入 Streamlit 框架中使用；而另一個檔案則為 Streamlit web app 的頁面呈現。</p>\n<h4 id=\"1.-所需環境及編譯器\">1. 所需環境及編譯器<a title=\"#1.-所需環境及編譯器\" href=\"#1.-所需環境及編譯器\"></a></h4>\n<p>這個 web app 的實作需要在 <a href=\"https://www.python.org/downloads/\" target=\"_blank\">Python 3.7 以上</a>的版本中進行，並且利用 <a href=\"https://code.visualstudio.com/download\" target=\"_blank\">Visual Studio Code (VS Code)</a> 做為程式編譯器。</p>\n<h4 id=\"2.-安裝-streamlit\">2. 安裝 Streamlit<a title=\"#2.-安裝-streamlit\" href=\"#2.-安裝-streamlit\"></a></h4>\n<p>準備好實作的環境和編譯器後，便可點開 VS Code 安裝 Streamlit。</p>\n<p>開啟 VS Code 畫面並按下 <code>ctrl+j</code> (Windows) / <code>cmd+j</code> (Mac) 可開啟終端機，而後在其中輸入下方程式碼，即可下載 Streamlit。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install streamlit</span><br></pre></td></tr></table></figure>\n<p>Streamlit 下載完成後，可繼續輸入下面的程式碼，查看官方提供的四個參考 web app，當中也附有頁面的程式碼，可以簡單瀏覽 Streamlit 的撰寫方式。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">streamlit hello</span><br></pre></td></tr></table></figure>\n<h4 id=\"3.-定義情緒分析函式，並儲存為-pickle-檔\">3. 定義情緒分析函式，並儲存為 pickle 檔<a title=\"#3.-定義情緒分析函式，並儲存為-pickle-檔\" href=\"#3.-定義情緒分析函式，並儲存為-pickle-檔\"></a></h4>\n<p>首先來撰寫情緒分析的函式，在這個函式中輸入語句，便可獲得此句話的情緒分數，<br>\n我們引入 <code>SnowNLP</code> 套件來進行情緒分數的計算。</p>\n<p>若本機中無下載過 <code>snownlp</code>，需先在終端機跑下面程式進行安裝：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install snownlp</span><br></pre></td></tr></table></figure>\n<p>接著，在程式檔案中引入 <code>SnowNLP</code> 套件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from snownlp import SnowNLP</span><br></pre></td></tr></table></figure>\n<p>而後將其撰寫為函式，使得使用者輸入的文句被套件轉換為情緒分數。</p>\n<p>其中需注意的是，<span style=\"background-color: #B7EEE0\">由於 <code>SnowNLP</code> 是一款簡體中文套件，所以我們需利用 <code>.han</code> 將輸入函式的語句轉換為簡體中文字符</span>，才可進行情緒分數的計算。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def Sentiment_Analysis(inputSTR):</span><br><span class=\"line\">    from snownlp import SnowNLP</span><br><span class=\"line\">    sent = SnowNLP(inputSTR) # 將文句送入 SnowNLP</span><br><span class=\"line\">    simplified_sent = sent.han # 轉換為簡體字符</span><br><span class=\"line\">    sentiment_sent = SnowNLP(simplified_sent).sentiments # 計算情緒分數</span><br><span class=\"line\"></span><br><span class=\"line\">    return sentiment_sent</span><br></pre></td></tr></table></figure>\n<p>最後，需將定義好的函式儲存為 pickle 檔，並命名為 <code>sentiment.pickle</code>，使其能保存並移轉至另一個程式檔案中使用。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import pickle</span><br><span class=\"line\"></span><br><span class=\"line\">sentiment_pickle = open(&#x27;sentiment.pickle&#x27;, &#x27;wb&#x27;) </span><br><span class=\"line\">pickle.dump(Sentiment_Analysis, sentiment_pickle) </span><br><span class=\"line\">sentiment_pickle.close()</span><br></pre></td></tr></table></figure>\n<p>整體程式碼如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 引入套件</span><br><span class=\"line\">import pickle</span><br><span class=\"line\">from snownlp import SnowNLP</span><br><span class=\"line\"></span><br><span class=\"line\"># 定義情緒分析函式</span><br><span class=\"line\">def Sentiment_Analysis(inputSTR):</span><br><span class=\"line\">    from snownlp import SnowNLP</span><br><span class=\"line\">    sent = SnowNLP(inputSTR)</span><br><span class=\"line\">    simplified_sent = sent.han</span><br><span class=\"line\">    sentiment_sent = SnowNLP(simplified_sent).sentiments</span><br><span class=\"line\"></span><br><span class=\"line\">    return sentiment_sent</span><br><span class=\"line\"></span><br><span class=\"line\"># 儲存為 pickle 檔</span><br><span class=\"line\">sentiment_pickle = open(&#x27;sentiment.pickle&#x27;, &#x27;wb&#x27;) </span><br><span class=\"line\">pickle.dump(Sentiment_Analysis, sentiment_pickle) </span><br><span class=\"line\">sentiment_pickle.close() </span><br></pre></td></tr></table></figure>\n<h4 id=\"4.-架構-streamlit-頁面\">4. 架構 Streamlit 頁面<a title=\"#4.-架構-streamlit-頁面\" href=\"#4.-架構-streamlit-頁面\"></a></h4>\n<p>在撰寫 Streamlit 頁面的檔案中，我們首先先引入 <code>streamlit</code> 套件，並將其縮略為 <code>st</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import streamlit as st</span><br></pre></td></tr></table></figure>\n<p>而後利用 <code>st.markdown()</code> 加入 web app 的標題，並放上說明文字：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">st.markdown(&quot;&lt;h1 style=&#x27;text-align: center; color: #844200;&#x27;&gt;讀你的情緒&lt;/h1&gt;&quot;, unsafe_allow_html=True)</span><br><span class=\"line\">st.markdown(&quot;&lt;h6 style=&#x27;text-align: center&#x27;&gt;我能夠分析你的情緒！請於下方輸入語句，讓我看看你現在的心情如何？&lt;/h6&gt;&quot;, unsafe_allow_html=True)</span><br></pre></td></tr></table></figure>\n<p>接著，用 <code>st.text_input()</code> 在頁面中加上使用者的輸入欄位，小括弧中第一個單引號內的文字為輸入框上方的指示語；而後方的單引號則可寫入預設文字，若無則留空：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">inputSTR = st.text_input(&#x27;輸入任何你想說的話：&#x27;, &#x27;&#x27;)</span><br></pre></td></tr></table></figure>\n<p>使用者提交文句後，我們可以在頁面中以 <code>st.write()</code> 再次顯示其輸入語句做確認，寫法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if inputSTR:</span><br><span class=\"line\">    st.write(&#x27;你所輸入的句子為：&#x27;, inputSTR)</span><br></pre></td></tr></table></figure>\n<img src=\"../images/streamlit01.png\" width=\"150%\" style=\"display:block; margin:auto;\" />\n<center><font size=\"1\">web app 初始畫面，包含標題、說明文字、指示語和使用者輸入框</font></center>\n<br>\n<p>再來，我們引入前面寫好的函式 pickle 檔，使先前定義的函式可以應用於此程式檔案中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import pickle</span><br><span class=\"line\">from sentiment import Sentiment_Analysis # 從 sentiment 檔案中引入 Sentiment_Analysis 函式  </span><br></pre></td></tr></table></figure>\n<p>接下來，根據 <code>SnowNLP</code> 計算出的情緒分數，我們以數值和進度條 (<code>st.progress()</code>) 的方式呈現：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if inputSTR:</span><br><span class=\"line\">\t</span><br><span class=\"line\">    # 顯示情緒分數數值</span><br><span class=\"line\">    st.write(&#x27;情緒指數：&#123;&#125;&#x27;.format(Sentiment_Analysis(inputSTR)))</span><br><span class=\"line\">    </span><br><span class=\"line\">    # 情緒分數的進度條</span><br><span class=\"line\">    st.write(&#x27;情緒程度：&#x27;)</span><br><span class=\"line\">    st.progress(Sentiment_Analysis(inputSTR))</span><br></pre></td></tr></table></figure>\n<img src=\"../images/streamlit02.png\" width=\"150%\" style=\"display:block; margin:auto;\" />\n<center><font size=\"1\">使用者輸入語句後，web app 畫面會再次顯示句子並呈現情緒分數，下方的進度條也會依據情緒程度填滿</font></center>\n<br>\n<p>最後，將 <code>SnowNLP</code> 給出的情緒指數劃分區間，並給予不同的回應和圖片，文字以 <code>st.write()</code> 顯示；而圖片透過 <code>st.image()</code> 插入。</p>\n<p>在此，我們把正負情緒分數切分為五個區間，低於 0.19 為很差的情緒；0.19 至 0.4 為不太好的心情；介於 0.4 到 0.5 之間代表心情平靜；大於 0.5 且小於 0.7 為不錯的情緒；而分數大於 0.7 則表達開心的心情。依據不同的情緒，web app 頁面都會給出相對應的回覆和圖示。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if Sentiment_Analysis(inputSTR) &lt;= 0.19:</span><br><span class=\"line\">       st.write(&#x27;你現在心情似乎很差，有需要幫助的時候不要不好意思開口喔！&#x27;)</span><br><span class=\"line\">       st.image(&#x27;./emotion_pic/01.png&#x27;, width=200)</span><br><span class=\"line\">   </span><br><span class=\"line\">   elif Sentiment_Analysis(inputSTR) &gt; 0.19 and Sentiment_Analysis(inputSTR) &lt;= 0.4:</span><br><span class=\"line\">       st.write(&#x27;你的心情好像不太好，聽首歌或許會有幫助喔！&#x27;)</span><br><span class=\"line\">       st.image(&#x27;./emotion_pic/02.png&#x27;, width=200)</span><br><span class=\"line\">   </span><br><span class=\"line\">   elif Sentiment_Analysis(inputSTR) &gt; 0.4 and Sentiment_Analysis(inputSTR) &lt;= 0.5:</span><br><span class=\"line\">       st.write(&#x27;你目前的心情好像很平靜呢。&#x27;)</span><br><span class=\"line\">       st.image(&#x27;./emotion_pic/03.png&#x27;, width=200)</span><br><span class=\"line\">   </span><br><span class=\"line\">   elif Sentiment_Analysis(inputSTR) &gt; 0.5 and Sentiment_Analysis(inputSTR) &lt;= 0.7:</span><br><span class=\"line\">       st.write(&#x27;你的心情好像滿不錯的呢！&#x27;)</span><br><span class=\"line\">       st.image(&#x27;./emotion_pic/04.png&#x27;, width=200)</span><br><span class=\"line\">   </span><br><span class=\"line\">   else:</span><br><span class=\"line\">       st.write(&#x27;你感覺很開心唷！有什麼好事可以跟我分享嗎？&#x27;)</span><br><span class=\"line\">       st.image(&#x27;./emotion_pic/05.png&#x27;, width=200)</span><br></pre></td></tr></table></figure>\n<img src=\"../images/streamlit03.png\" width=\"150%\" style=\"display:block; margin:auto;\" />\n<center><font size=\"1\">根據情緒分數給予回應和圖示</font></center>\n<br>\n<p>此頁面完整的程式碼如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 引入套件</span><br><span class=\"line\">import pickle</span><br><span class=\"line\">import streamlit as st</span><br><span class=\"line\">from sentiment import Sentiment_Analysis</span><br><span class=\"line\"></span><br><span class=\"line\"># 插入標題和說明文字</span><br><span class=\"line\">st.markdown(&quot;&lt;h1 style=&#x27;text-align: center; color: #844200;&#x27;&gt;讀你的情緒&lt;/h1&gt;&quot;, unsafe_allow_html=True)</span><br><span class=\"line\">st.markdown(&quot;&lt;h6 style=&#x27;text-align: center&#x27;&gt;我能夠分析你的情緒！請於下方輸入語句，讓我看看你現在的心情如何？&lt;/h6&gt;&quot;, unsafe_allow_html=True)</span><br><span class=\"line\"></span><br><span class=\"line\"># 使用者輸入欄位</span><br><span class=\"line\">inputSTR = st.text_input(&#x27;輸入任何你想說的話：&#x27;, &#x27;&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\"># 再次顯示使用者提交之文句</span><br><span class=\"line\">if inputSTR:</span><br><span class=\"line\">    st.write(&#x27;你所輸入的句子為：&#x27;, inputSTR)</span><br><span class=\"line\"></span><br><span class=\"line\"># 開啟 pickle 檔</span><br><span class=\"line\">sentiment_pickle = open(&#x27;sentiment.pickle&#x27;, &#x27;rb&#x27;) </span><br><span class=\"line\">sentiment = pickle.load(sentiment_pickle) </span><br><span class=\"line\">sentiment_pickle.close() </span><br><span class=\"line\"></span><br><span class=\"line\"># 以數值和進度條顯示情緒分數</span><br><span class=\"line\">if inputSTR:</span><br><span class=\"line\">    st.write(&#x27;情緒指數：&#123;&#125;&#x27;.format(Sentiment_Analysis(inputSTR)))</span><br><span class=\"line\">    st.write(&#x27;情緒程度：&#x27;)</span><br><span class=\"line\">    st.progress(Sentiment_Analysis(inputSTR))</span><br><span class=\"line\">    </span><br><span class=\"line\"># 根據不同的情緒分數給予回應和圖示    </span><br><span class=\"line\">    if Sentiment_Analysis(inputSTR) &lt;= 0.19:</span><br><span class=\"line\">        st.write(&#x27;你現在心情似乎很差，有需要幫助的時候不要不好意思開口喔！&#x27;)</span><br><span class=\"line\">        st.image(&#x27;./emotion_pic/01.png&#x27;, width=200)</span><br><span class=\"line\">    elif Sentiment_Analysis(inputSTR) &gt; 0.19 and Sentiment_Analysis(inputSTR) &lt;= 0.4:</span><br><span class=\"line\">        st.write(&#x27;你的心情好像不太好，聽首歌或許會有幫助喔！&#x27;)</span><br><span class=\"line\">        st.image(&#x27;./emotion_pic/02.png&#x27;, width=200)</span><br><span class=\"line\">    elif Sentiment_Analysis(inputSTR) &gt; 0.4 and Sentiment_Analysis(inputSTR) &lt;= 0.5:</span><br><span class=\"line\">        st.write(&#x27;你目前的心情好像很平靜呢。&#x27;)</span><br><span class=\"line\">        st.image(&#x27;./emotion_pic/03.png&#x27;, width=200)</span><br><span class=\"line\">    elif Sentiment_Analysis(inputSTR) &gt; 0.5 and Sentiment_Analysis(inputSTR) &lt;= 0.7:</span><br><span class=\"line\">        st.write(&#x27;你的心情好像滿不錯的呢！&#x27;)</span><br><span class=\"line\">        st.image(&#x27;./emotion_pic/04.png&#x27;, width=200)</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        st.write(&#x27;你感覺很開心唷！有什麼好事可以跟我分享嗎？&#x27;)</span><br><span class=\"line\">        st.image(&#x27;./emotion_pic/05.png&#x27;, width=200)</span><br></pre></td></tr></table></figure>\n<h3 id=\"部署-streamlit-web-app\">部署 Streamlit web app<a title=\"#部署-streamlit-web-app\" href=\"#部署-streamlit-web-app\"></a></h3>\n<p>完成兩個程式檔案的撰寫後，便可將這個情緒分析 web app 部署至 Streamlit Community Cloud 分享給所有人使用。</p>\n<p>部署 web app 僅需完成以下三個步驟：</p>\n<h4 id=\"1.-將檔案上傳至-github\">1. 將檔案上傳至 GitHub<a title=\"#1.-將檔案上傳至-github\" href=\"#1.-將檔案上傳至-github\"></a></h4>\n<p>首先，在個人 GitHub 帳號中創建一個 public repository，並上傳完整的程式檔案及素材，<span style=\"background-color: #B7EEE0\">當中必須包含此份檔案所需的套件版本清單 (<code>requirement.txt</code>)</span></p>\n<h4 id=\"2.-註冊並登入-streamlit-community-cloud\">2. 註冊並登入 Streamlit Community Cloud<a title=\"#2.-註冊並登入-streamlit-community-cloud\" href=\"#2.-註冊並登入-streamlit-community-cloud\"></a></h4>\n<p>於 <a href=\"https://streamlit.io/cloud\" target=\"_blank\">Streamlit Community Cloud</a> 註冊帳號，登入後點下 <code>Get Started</code> 按鈕。</p>\n<h4 id=\"3.-填妥資料並發布\">3. 填妥資料並發布<a title=\"#3.-填妥資料並發布\" href=\"#3.-填妥資料並發布\"></a></h4>\n<p>在 Deploy an app 畫面中填入自己的 public repository 名稱，隨後便可按下 <code>Deploy</code> 完成部署。</p>\n<p>下方為發布完成之 web app 的實際操作畫面：</p>\n<img src=\"../images/streamlit04.gif\" width=\"150%\" style=\"display:block; margin:auto;\" />\n<center><font size=\"1\">Streamlit 情緒分析 web app 完整使用畫面</font></center>\n<br>\n<h3 id=\"結語\">結語<a title=\"#結語\" href=\"#結語\"></a></h3>\n<p>透過視覺化網頁應用程式的呈現，機器學習的訓練成果和資料科學的分析數據能夠以更親民的方式走入使用者的生活當中，而單純以 Python 語言便可建構的 Streamlit 框架，更是提供了一個簡易又便捷的展示管道，打破過往讓人望之卻步的程式碼和數據高牆，使機器學習和數據科學的成效能有互動式的呈顯媒介。</p>\n","next":{"title":"【Tutorial】如何在 Kaggle 創建比賽","link":"2023/06/05/【Tutorial】如何在-Kaggle-創建比賽"},"plink":"http://example.com/2023/08/07/【Tutorial】利用-Streamlit-建立情緒分析-web-app/","toc":[{"id":"緣起","title":"緣起","index":"1"},{"id":"關於-streamlit","title":"關於 Streamlit","index":"2"},{"id":"建立-streamlit-web-app","title":"建立 Streamlit Web App","index":"3"},{"id":"部署-streamlit-web-app","title":"部署 Streamlit web app","index":"4"},{"id":"結語","title":"結語","index":"5"}],"reading_time":"2498 words in 17 min"}